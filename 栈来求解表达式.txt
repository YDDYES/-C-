#include <stdio.h>
#include <stdlib.h>

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define OVERFLOW -2
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10

typedef int Status;

typedef struct
{
    char *base;
    char *top;
    int stacksize;
}SqStack;

//构造一个空栈
Status InitStack(SqStack *S)
{
    S->base = (char *)malloc(STACK_INIT_SIZE * sizeof(char));
    if(!S->base)
    {
        printf("内存分配失败!\n");
        exit(OVERFLOW);
    }

    S->top = S->base;
    S->stacksize = STACKINCREMENT;
    return OK;
}

//若栈不为空，则用e返回S的栈顶元素，并返回OK；否则返回ERROR
Status GetTop(SqStack *S, char *e)
{
    if(S->top == S->base)
        return ERROR;

    *e = *(S->top - 1);
    return OK;
}

//插入元素e为新的栈顶元素
Status Push(SqStack *S, char e)
{
    if(S->top - S->base >= STACK_INIT_SIZE)   //栈满， 追加存储空间
    {
        S->base = (char *)realloc(S->base, (S->stacksize + STACKINCREMENT) * sizeof(char));
        if(!S->base)
        {
            printf("内存分配失败!\n");
            exit(OVERFLOW);
        }

        S->top = S->base + S->stacksize;
        S->stacksize += STACKINCREMENT;
    }

    *S->top++ = e;

    return OK;
}

//若栈不为空，则删除S的栈顶元素，用e返回其值，并返回Ok；否则返回ERROR
Status Pop(SqStack *S, char *e)
{
    if(S->top == S->base)
        return ERROR;

    *e =  *--S->top;

    return OK;
}
//销毁栈S，使其不复存在
Status StackDestroy(SqStack *S)
{
    free(S->base);
    S->base = NULL;
    S->top = NULL;
    S->stacksize = 0;
    return OK;
}




int getIndex(char theta)   //获取theta所对应的索引
{
	    int index = 0;
    switch (theta)
	    {
	    case '+':
	        index = 0;
            break;
	    case '-':
        index = 1;
	        break;
	        case '*':
        index = 2;
            break;
	    case '/':
	        index = 3;
	        break;
	    case '(':
	        index = 4;
	        break;
	    case ')':
	        index = 5;
	        break;
	    case '#':
	        index = 6;
	    default:break;
	    }
	    return index;
}

char getPriority(char theta1, char theta2)   //获取theta1与theta2之间的优先级
{
	    const char priority[][7] =     //算符间的优先级关系
	    {
	        { '>','>','<','<','<','>','>' },
	        { '>','>','<','<','<','>','>' },
	        { '>','>','>','>','<','>','>' },
	        { '>','>','>','>','<','>','>' },
            { '<','<','<','<','<','=','0' },
	        { '>','>','>','>','0','>','>' },
	        { '<','<','<','<','<','0','=' },
	    };

	    int index1 = getIndex(theta1);
	    int index2 = getIndex(theta2);
	    return priority[index1][index2];
}
//判断c是否为运算符
Status In(char c)
{
    switch(c)
    {
    case '+':
    case '-':
    case '*':
    case '/':
    case '(':
    case ')':
    case '#':
        return TRUE;
    default:
        return FALSE;
    }

}

char Operate(char a, char theta, char b)
{
    char c;
    switch(theta)
    {
    case '+':
        c = a + b;
        break;
    case '-':
        c = a - b;
        break;
    case '*':
        c = a * b;
        break;
    case '/':
        c = a / b;
        break;
    }
    return c;
}


int main()
{
    printf("请输入表达式,并以#结束:\n");
        SqStack OPTR, OPND;
    char a, b, d, x, theta;
    char c;
    char z[6];
    int i;
    InitStack(&OPTR);   //初始化运算符栈
    Push(&OPTR, '#');
    InitStack(&OPND);   //初始化运算数栈

    c = getchar();
    GetTop(&OPTR, &x);
    while(c != '#' || x != '#')
    {
        if(In(c))

        {
            switch(getPriority(x,c))
            {
            case '<':
                Push(&OPTR, c);
                c = getchar();
                break;
            case '=':
                Pop(&OPTR, &x);
                c = getchar();
                break;
            case '>':
                Pop(&OPTR, &theta);
                Pop(&OPND, &b);
                Pop(&OPND, &a);
                Push(&OPND, Operate(a, theta, b));
                break;
            }
        }
            else if(c >= '0' && c <= '9')
            {
                i = 0;
                do
                {
                    z[i] = c;
                    i ++;
                    c = getchar();
                }while(c >= '0' && c <= '9');
                z[i] = 0;
                d = atoi(z);
                Push(&OPND, d);
            }
            else
            {
                printf("ERROR3\n");
                exit(1);
            }
            GetTop(&OPTR, &x);
        }
    GetTop(&OPND, &x);
    StackDestroy(&OPTR);
    StackDestroy(&OPND);
    printf("%d\n", x);
    return 0;
}