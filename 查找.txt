#include <stdio.h>
#include <stdlib.h>
#define MaxSize  100


typedef int DataType;
typedef  int KeyType;



typedef struct
{
DataType list[MaxSize];
int size;
} SeqList;



void ListInitiate(SeqList *L)/*初始化顺序表L*/
{

L->size = 0;
}

int ListLength(SeqList L)/*返回顺序表L的当前数据元素个数*/
{
return L.size;
}

int ListInsert(SeqList *L, int i, DataType x)
/*在顺序表L的位置i（0 ≤ i ≤ size）前插入数据元素值x*/
/*插入成功返回1，插入失败返回0*/
{
int j;
if(L->size >= MaxSize)
{
printf("顺序表已满无法插入! \n");
return 0;
}
else if(i < 0 || i > L->size )
{
printf("参数i不合法! \n");
return 0;
}
else
{ //此段程序有一处错误
for(j = L->size; j > i; j--) L->list[j] = L->list[j+1];/*为插入做准备*/
L->list[i] = x;/*插入*/
L->size ++;/*元素个数加1*/
return 1;
}
}


int SeqSearch(SeqList R,int n,KeyType k)
{
int i=0;
printf("顺序查找：");
while(i<n&&R.list[i]!=k)
{
printf("%d",R.list[i]);
i++;
}
if(i>=n)
return -1;
else
{
printf("\n查找值地址为：");
printf("%d",i);
return i;
}
}






int BinSearch(SeqList R,int n,KeyType k)
{
int low=0,high=n-1,mid,count=0;
printf("折半查找：");
while(low<=high)
{
mid=(low+high)/2;
printf("\n第%d次查找：在[ %d ,%d]中找到元素R[%d]:%d\n ",++count,low,high,mid,R.list[mid]);
if(R.list[mid]==k)
return mid;
if(R.list[mid]>k)
high=mid-1;
else
low=mid+1;
}
return -1;
}




int main()
{

    SeqList L;
    ListInitiate(&L);
    int z,i;
    int a;
    ListLength(L);
    for(i=0;i<=10;i++)
    {
       ListInsert(&L,i,i+1);
    }

    printf("请输入需要查找的数值：");
    scanf("%d",&z);

    SeqSearch(L, L.size, z);
    printf("\n");
    BinSearch(L,L.size,z);

}