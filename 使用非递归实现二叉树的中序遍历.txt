#include <stdlib.h>
#include <stdio.h>
#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define OVERFLOW -2
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10

typedef char DataType;
typedef struct Node
{
DataType data;/*数据域*/
struct Node *leftChild;/*左子树指针*/
struct Node *rightChild;/*右子树指针*/
}BiTreeNode;/*结点的结构体定义*/

/*初始化创建二叉树的头结点*/
void Initiate(BiTreeNode **root)
{
*root = (BiTreeNode *)malloc(sizeof(BiTreeNode));
(*root)->leftChild = NULL;
(*root)->rightChild = NULL;
}

void Destroy(BiTreeNode **root)
{
if((*root) != NULL && (*root)->leftChild != NULL)
Destroy(&(*root)->leftChild);

if((*root) != NULL && (*root)->rightChild != NULL)
Destroy(&(*root)->rightChild);

free(*root);
}

/*若当前结点curr非空，在curr的左子树插入元素值为x的新结点*/
/*原curr所指结点的左子树成为新插入结点的左子树*/
/*若插入成功返回新插入结点的指针，否则返回空指针*/
BiTreeNode *InsertLeftNode(BiTreeNode *curr, DataType x)
{
BiTreeNode *s, *t;
if(curr == NULL) return NULL;

t = curr->leftChild;/*保存原curr所指结点的左子树指针*/
s = (BiTreeNode *)malloc(sizeof(BiTreeNode));
s->data = x;
s->leftChild = t;/*新插入结点的左子树为原curr的左子树*/
s->rightChild = NULL;

curr->leftChild = s;/*新结点成为curr的左子树*/
return curr->leftChild;/*返回新插入结点的指针*/
}

/*若当前结点curr非空，在curr的右子树插入元素值为x的新结点*/
/*原curr所指结点的右子树成为新插入结点的右子树*/
/*若插入成功返回新插入结点的指针，否则返回空指针*/
BiTreeNode *InsertRightNode(BiTreeNode *curr, DataType x)
{
BiTreeNode *s, *t;

if(curr == NULL) return NULL;

t = curr->rightChild;/*保存原curr所指结点的右子树指针*/
s = (BiTreeNode *)malloc(sizeof(BiTreeNode));
s->data = x;
s->rightChild = t;/*新插入结点的右子树为原curr的右子树*/
s->leftChild = NULL;

curr->rightChild = s;/*新结点成为curr的右子树*/
return curr->rightChild;/*返回新插入结点的指针*/
}



void PreOrder(BiTreeNode *t, void visit(DataType item))
//使用visit(item)函数前序遍历二叉树t
{
if(t != NULL)
{//此小段有一处错误
visit(t->data);
PreOrder(t-> leftChild, visit);
PreOrder(t-> rightChild, visit);
}
}

void InOrder(BiTreeNode *t, void visit(DataType item))
//使用visit(item)函数中序遍历二叉树t
{
if(t != NULL)
{//此小段有一处错误
InOrder(t->leftChild, visit);
visit(t->data);
InOrder(t->rightChild, visit);

}
}

void PostOrder(BiTreeNode *t, void visit(DataType item))
//使用visit(item)函数后序遍历二叉树t
{
if(t != NULL)
{//此小段有一处错误

PostOrder(t->leftChild, visit);
PostOrder(t->rightChild, visit);
visit(t->data);
}
}


void Visit(DataType item)
{
printf("%c ", item);
}

BiTreeNode *Search(BiTreeNode *root, DataType x)//需找元素x是否在二叉树中
{
BiTreeNode *find=NULL;
if(root!=NULL)
{
if(root->data==x)
find=root;
else
{
find=Search(root->leftChild,x);
if(find==NULL)
find=Search(root->rightChild,x);
}
}
return find;
}

typedef int Status;

typedef struct
{
    char *base;
    char *top;
    int stacksize;
}SqStack;

//构造一个空栈
Status InitStack(SqStack *S)
{
    S->base = (char *)malloc(STACK_INIT_SIZE * sizeof(char));
    if(!S->base)
    {
        printf("内存分配失败!\n");
        exit(OVERFLOW);
    }

    S->top = S->base;
    S->stacksize = STACKINCREMENT;
    return OK;
}

//插入元素e为新的栈顶元素
Status Push(SqStack *S, char e)
{
    if(S->top - S->base >= STACK_INIT_SIZE)   //栈满， 追加存储空间
    {
        S->base = (char *)realloc(S->base, (S->stacksize + STACKINCREMENT) * sizeof(char));
        if(!S->base)
        {
            printf("内存分配失败!\n");
            exit(OVERFLOW);
        }

        S->top = S->base + S->stacksize;
        S->stacksize += STACKINCREMENT;
    }

    *S->top++ = e;

    return OK;
}

//若栈不为空，则删除S的栈顶元素，用e返回其值，并返回Ok；否则返回ERROR
Status Pop(SqStack *S, char *e)
{
    if(S->top == S->base)
        return ERROR;

    *e =  *--S->top;

    return OK;
}

Status StackEmpty(SqStack S)
{
	return (S.base == S.top)?1:0;
}



//若栈不为空，则用e返回S的栈顶元素，并返回OK；否则返回ERROR
Status GetTop(SqStack *S, char *e)
{
    if(S->top == S->base)
        return ERROR;

    *e = *(S->top - 1);
    return OK;
}

Status InOrderT(BiTreeNode *T, void visit(DataType item))
{
	SqStack S;
	BiTreeNode *p;
	InitStack(&S);
	p = T;
	while (p!=NULL || !StackEmpty(S)) {
		if (p) {	//根指针进栈，遍历左子树
			Push(&S, p);
			p = p->leftChild;
		}
		else {		//根指针退栈，访问根结点，遍历右子树
			Pop(&S, &p);
			 visit(p->data);
			p = p->rightChild;
		} //if
	} //while
	return OK;
}


void main(void)
{
BiTreeNode *root, *p, *pp,*find;
char x='E';

Initiate(&root);
p = InsertLeftNode(root, 'A');
p = InsertLeftNode(p, 'B');
p = InsertLeftNode(p, 'D');
p = InsertRightNode(p, 'G');
p = InsertRightNode(root->leftChild, 'C');
pp = p;
InsertLeftNode(p, 'E');
InsertRightNode(pp, 'F');

printf("前序遍历：");
PreOrder(root->leftChild, Visit);
printf("\n中序遍历：");
InOrderT(root->leftChild,Visit);
printf("\n后序遍历：");
PostOrder(root->leftChild, Visit);

find=Search(root,x);
if(find!=NULL)
printf("\n数据元素%c在二叉树中 \n",x);
else
printf("\n数据元素%c不在二叉树中 \n",x);

Destroy(&root);

}